diff --git a/src/runtime/heapdump.go b/src/runtime/heapdump.go
index c317b5f..435cb91 100644
--- a/src/runtime/heapdump.go
+++ b/src/runtime/heapdump.go
@@ -188,19 +188,36 @@ func dumptype(t *_type) {
 	} else {
 		pkgpathstr := t.nameOff(x.pkgpath).name()
 		pkgpath := stringStructOf(&pkgpathstr)
-		namestr := t.name()
+		typestr := t.string() // extract \1 and \2 from `([*]*)\w+\.(\w+)`
+		afterstar := 0
+		for afterstar < len(typestr) {
+			if typestr[afterstar] != '*' {
+				break
+			}
+			afterstar++
+		}
+		beforename := len(typestr) - 1
+		for beforename >= 0 {
+			if typestr[beforename] == '.' || typestr[beforename] == '*' {
+				break
+			}
+			beforename--
+		}
+		prefixstr := typestr[0:afterstar]
+		namestr := typestr[beforename+1:]
+		prefix := stringStructOf(&prefixstr)
 		name := stringStructOf(&namestr)
-		dumpint(uint64(uintptr(pkgpath.len) + 1 + uintptr(name.len)))
+		dumpint(uint64(uintptr(prefix.len) + uintptr(pkgpath.len) + 1 + uintptr(name.len)))
+		dwrite(prefix.str, uintptr(prefix.len))
 		dwrite(pkgpath.str, uintptr(pkgpath.len))
 		dwritebyte('.')
 		dwrite(name.str, uintptr(name.len))
 	}
-	dumpbool(t.kind&kindDirectIface == 0 || t.kind&kindNoPointers == 0)
+	dumpbool(t.kind&kindDirectIface != 0)
 }
 
 // dump an object
 func dumpobj(obj unsafe.Pointer, size uintptr, bv bitvector) {
-	dumpbvtypes(&bv, obj)
 	dumpint(tagObject)
 	dumpint(uint64(uintptr(obj)))
 	dumpmemrange(obj, size)
@@ -261,31 +278,36 @@ func dumpframe(s *stkframe, arg unsafe.Pointer) bool {
 	}
 	stkmap := (*stackmap)(funcdata(f, _FUNCDATA_LocalsPointerMaps))
 
-	// Dump any types we will need to resolve Efaces.
-	if child.args.n >= 0 {
-		dumpbvtypes(&child.args, unsafe.Pointer(s.sp+child.argoff))
-	}
 	var bv bitvector
 	if stkmap != nil && stkmap.n > 0 {
 		bv = stackmapdata(stkmap, pcdata)
-		dumpbvtypes(&bv, unsafe.Pointer(s.varp-uintptr(bv.n*sys.PtrSize)))
 	} else {
 		bv.n = -1
 	}
 
+	name := funcname(f)
+	if name == "" {
+		name = "unknown function"
+	}
+
+	// Stack frame is given by fp-sp except in runtime.goexit, where there
+	// isn't a real stack frame and we instead use the size of the child's
+	// args to maintain the invariant that the parent's frame always includes
+	// the args passed to the child.
+	frameSize := s.fp - s.sp
+	if name == "runtime.goexit" {
+		frameSize = child.arglen
+	}
+
 	// Dump main body of stack frame.
 	dumpint(tagStackFrame)
 	dumpint(uint64(s.sp))                              // lowest address in frame
 	dumpint(uint64(child.depth))                       // # of frames deep on the stack
 	dumpint(uint64(uintptr(unsafe.Pointer(child.sp)))) // sp of child, or 0 if bottom of stack
-	dumpmemrange(unsafe.Pointer(s.sp), s.fp-s.sp)      // frame contents
+	dumpmemrange(unsafe.Pointer(s.sp), frameSize)      // frame contents
 	dumpint(uint64(f.entry))
 	dumpint(uint64(s.pc))
 	dumpint(uint64(s.continpc))
-	name := funcname(f)
-	if name == "" {
-		name = "unknown function"
-	}
 	dumpstr(name)
 
 	// Dump fields in the outargs section
@@ -314,8 +336,8 @@ func dumpframe(s *stkframe, arg unsafe.Pointer) bool {
 			dumpint(uint64(off))
 		}
 	} else if stkmap.n > 0 {
-		// Locals bitmap information, scan just the pointers in
-		// locals.
+		// Locals bitmap information, scan just the pointers in locals.
+		bv := stackmapdata(stkmap, pcdata)
 		dumpbv(&bv, s.varp-uintptr(bv.n)*sys.PtrSize-s.sp)
 	}
 	dumpint(fieldKindEol)
@@ -325,6 +347,7 @@ func dumpframe(s *stkframe, arg unsafe.Pointer) bool {
 	child.arglen = s.arglen
 	child.sp = (*uint8)(unsafe.Pointer(s.sp))
 	child.depth++
+	child.callee = name
 	stkmap = (*stackmap)(funcdata(f, _FUNCDATA_ArgsPointerMaps))
 	if stkmap != nil {
 		child.args = stackmapdata(stkmap, pcdata)
@@ -421,20 +444,29 @@ func finq_callback(fn *funcval, obj unsafe.Pointer, nret uintptr, fint *_type, o
 }
 
 func dumproots() {
-	// TODO(mwhudson): dump datamask etc from all objects
-	// data segment
-	dumpbvtypes(&firstmoduledata.gcdatamask, unsafe.Pointer(firstmoduledata.data))
-	dumpint(tagData)
-	dumpint(uint64(firstmoduledata.data))
-	dumpmemrange(unsafe.Pointer(firstmoduledata.data), firstmoduledata.edata-firstmoduledata.data)
-	dumpfields(firstmoduledata.gcdatamask)
-
-	// bss segment
-	dumpbvtypes(&firstmoduledata.gcbssmask, unsafe.Pointer(firstmoduledata.bss))
-	dumpint(tagBSS)
-	dumpint(uint64(firstmoduledata.bss))
-	dumpmemrange(unsafe.Pointer(firstmoduledata.bss), firstmoduledata.ebss-firstmoduledata.bss)
-	dumpfields(firstmoduledata.gcbssmask)
+	for md := &firstmoduledata; md != nil; md = md.next {
+		// data segment
+		if md.data != 0 {
+			dumpint(tagData)
+			dumpint(uint64(md.data))
+			dumpmemrange(unsafe.Pointer(md.data), md.edata-md.data)
+			dumpfields(md.gcdatamask)
+		}
+
+		// bss segments
+		if md.bss != 0 {
+			dumpint(tagBSS)
+			dumpint(uint64(md.bss))
+			dumpmemrange(unsafe.Pointer(md.bss), md.ebss-md.bss)
+			dumpfields(md.gcbssmask)
+		}
+		if md.noptrbss != 0 {
+			dumpint(tagBSS)
+			dumpint(uint64(md.noptrbss))
+			dumpmemrange(unsafe.Pointer(md.noptrbss), md.enoptrbss-md.noptrbss)
+			dumpint(fieldKindEol)
+		}
+	}
 
 	// MSpan.types
 	allspans := h_allspans
@@ -683,16 +715,6 @@ func dumpfields(bv bitvector) {
 	dumpint(fieldKindEol)
 }
 
-// The heap dump reader needs to be able to disambiguate
-// Eface entries. So it needs to know every type that might
-// appear in such an entry. The following routine accomplishes that.
-// TODO(rsc, khr): Delete - no longer possible.
-
-// Dump all the types that appear in the type field of
-// any Eface described by this bit vector.
-func dumpbvtypes(bv *bitvector, base unsafe.Pointer) {
-}
-
 func makeheapobjbv(p uintptr, size uintptr) bitvector {
 	// Extend the temp buffer if necessary.
 	nptr := size / sys.PtrSize
